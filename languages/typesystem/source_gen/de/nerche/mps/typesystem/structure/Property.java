package de.nerche.mps.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Property extends BaseConcept implements INamedConcept {
  public static final String concept = "de.nerche.mps.typesystem.structure.Property";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String PROPERTY_TYPE = "propertyType";

  public Property(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Property.NAME);
  }

  public void setName(String value) {
    this.setProperty(Property.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Property.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Property.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Property.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Property.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Property.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Property.VIRTUAL_PACKAGE, value);
  }

  public PropertyType getPropertyType() {
    return (PropertyType)this.getChild(PropertyType.class, Property.PROPERTY_TYPE);
  }

  public void setPropertyType(PropertyType node) {
    super.setChild(Property.PROPERTY_TYPE, node);
  }


  public static Property newInstance(SModel sm, boolean init) {
    return (Property)SModelUtil_new.instantiateConceptDeclaration("de.nerche.mps.typesystem.structure.Property", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Property newInstance(SModel sm) {
    return Property.newInstance(sm, false);
  }

}
